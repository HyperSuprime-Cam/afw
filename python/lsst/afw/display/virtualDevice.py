#
# LSST Data Management System
# Copyright 2008, 2009, 2010, 2015 LSST Corporation.
#
# This product includes software developed by the
# LSST Project (http://www.lsst.org/).
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the LSST License Statement and
# the GNU General Public License along with this program.  If not,
# see <http://www.lsstcorp.org/LegalNotices/>.
#

##
## \file
## \brief A dummy image display

class DisplayImpl(object):
    def __init__(self, display, verbose=False):
        """! Initialise the display
        \param display The display object that we're providing the implementation for
        \param frame an identifier for this display
        \param verbose be chatty?
        """
        self.display = display
        self.verbose = verbose

    def _buffer(self, enable=True):
        """!Enable or disable buffering of writes to the display
        \param enable  True or False, as appropriate
        """
        if self.verbose:
            print "dummy[%s]._buffer(%s)" % (self.display.frame, enable)

    def _dot(self, symb, c, r, size, ctype, *args, **kwargs):
        """!Draw symbol a symbol at (c, r)
        \param symb The desired symbol.  See dot() for details
        \param c (x) column position
        \param r (y) row position
        \param size  Size of symbol, in pixels
        \param ctype The desired colour, either e.g. afw.display.RED or a colour name known to X11
        """
        if self.verbose:
            print "dummy[%s]._dot('%s', %.2f, %.2f, size=%g, ctype=%s, %s, %s)" % \
                (self.display.frame, symb, c, r, size, ctype, args, kwargs)

    def _drawLines(self, points, ctype):
        """!Draw line defined by the list points
        \param symb A list of 0-indexed positions (x, y)
        \param ctype The desired colour, either e.g. afw.display.RED or a colour name known to X11
        """
        if self.verbose:
            print "dummy[%s]._drawLines(%s, ctype=%s)" % (self.display.frame, points, ctype)

    def _erase(self):
        """!Erase all glyphs drawn on display
        """
        if self.verbose:
            print "dummy[%s]._erase()" % (self.display.frame)

    def _flush(self):
        """!Flush any I/O buffers
        """
        if self.verbose:
            print "dummy[%s]._flush()" % self.display.frame

    def _getEvent(self):
        """Return an event generated by a keypress or mouse click
        """
        from interface import Event
        ev = Event("q")

        if self.verbose:
            print "dummy[%s]._getEvent() -> %s" % (self.display.frame, ev)

        return ev

    def _getMaskTransparency(self):
        """Return the mask transparency for a display
        """
        if self.verbose:
            print "dummy[%s]._getMaskTransparency()" % self.display.frame

    def _mtv(self, data, title="", wcs=None, *args, **kwargs):
        """Display some data on a display
        \param data data to display (an Exposure, MaskedImage, Image, or Mask)
        \param wcs   A Wcs to associate with data (if not provided by data itself)
        """
        if self.verbose:
            import re
            mat = re.search(r"imageLib\.([^;]+);", str(data))
            dataName = mat.group(1) if mat else str(data)
            print "dummy[%s]._mtv(%s, title=\"%s\", wcs=%s, %s, %s)" % (self.display.frame, dataName, title,
                                                                        "Wcs" if wcs else None, args, kwargs)

    def _setMaskTransparency(self, transparency, maskplane):
        """Set the transparency of a maskplane
        \param transparency The desired transparency, in the range [0, 100]
        \param maskplane The maskplane to set (None: all)
        """
        if self.verbose:
            print "dummy[%s]._setMaskTransparency(%g, maskplane=\"%s\")" % (self.display.frame, transparency, maskplane)

    def _setScaleLimits(self, min, max):
        """Set the transparency of a maskplane
        \param min  The minimum value of the stretch
        \param max  The maximum value of the stretch

        See also _setScaleType
        """
        if self.verbose:
            print "dummy[%s]._setScaleLimits(%g, %g)" % (self.display.frame, min, max)

    def _setScaleType(self, name):
        """Set the transparency of a maskplane
        \param name Name of stretch (e.g. linear)

        See also _setScaleLimits
        """
        if self.verbose:
            print "dummy[%s]._setScaleType(%s)" % (self.display.frame, name)

    def _show(self):
        """Show the requested display
        """    
        if self.verbose:
            print "dummy[%s]._show()" % self.display.frame

    def _pan(self, r, c):
        """Pan to (colc, rowc)
        \param c Desired column (x) position
        \param r Desired row (y) position
        """    
        if self.verbose:
            print "dummy[%s]._pan(%.2f, %.2f)" % (self.display.frame, r, c)

    def _zoom(self, zoomfac):
        """Set the zoom
        \param zoomfac  Zoom factor to use
        """    
        if self.verbose:
            print "dummy[%s]._zoom(%g)" % (self.display.frame, zoomfac)
