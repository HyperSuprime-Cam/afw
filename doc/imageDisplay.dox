namespace lsst { namespace afw { namespace image {
/**
\page afwSecDisplay  How to display images
\section afwSecDisplay  How to display images

 - \ref afwSecImageDisplay
 - \ref afwSecImageTypes
 - \ref afwSecImageDisplayConfiguration
 - \ref afwSecImageDisplayMosaics
 - \ref afwSecDs9Firewall
 
\section afwSecImageDisplay  Displaying images in the LSST framework

In April 2015 we restructured the image display code to be backend agnostic, while still only supporting a
virtualDevice (which does nothing), and ds9 (http://hea-www.harvard.edu/RD/ds9) for the present.  At
the same time we made the interface object oriented --- opening a display returns an object (the old
functional interface with a frame argument is supported for backward compatibility).

Although ds9 has a number of drawbacks (slow; slightly unstable API; awkward to use with firewalls) it
also as a number of advantages: Supported by the CfA; ubiquitous in astronomy; support for WCS; support
for multiple frames.

The basic functionality is in \c lsst.afw.display, and the workhorse routine
is \c mtv. The simplest use is simply to setup afw and display_ds9, start ds9 (you may have to
install it yourself) and python, and type:
\code
import lsst.afw.display as afwDisplay
import lsst.afw.image as afwImage

im = afwImage.ImageF("myFile.fits")

disp = afwDisplay.getDisplay()
disp.mtv(im)
\endcode
Rather than saving \c disp in a variable, you can say
\code
afwDisplay.getDisplay().mtv(im)
\endcode
and if the display doesn't exist it'll be created for you.  You can say e.g.
\code
disp = afwDisplay.getDisplay(2, "virtualDisplay")
\endcode
to create a rather useless display named "2" using the do-nothing \c virtualDisplay device;
you're more likely to specify \c "ds9" or (soon) \c "firefly".

You can %display images in multiple frames, either by explicitly specifying the
frame, or by setting the default with \c afwDisplay.setDefaultFrame().  If you
are using the ds9 backend and there's a
strong desire for multiple instances of ds9 this could be supported (by choosing
different tcp ports); file a ticket if this is really important for you.  ds9 uses integers as its `frame'
identifiers, but other display devices may use other types (e.g. strings).

See the manual at \ref lsst.afw.display.interface.Display for all the supported commands, and the iPython
notebook at \ref examples/imageDisplay.ipynb for examples (we'll provide an nbviewer link once this is
pushed to github).

Whenever you're writing more than a few glyphs
we \em strongly recommend that you turn on buffering (it's certainly necessary when you're using the
ds9 backend). The simplest way to do this is by using python's
\c with statement:
\code
with disp.Buffering():
    for source in sourceList:
        disp.dot("o", source.getXAstrom(), source.getYAstrom())
\endcode
You can explicitly flush the buffer at anytime with \c disp.flush()

\subsection afwSecImageTypes How afwDisplay handles different Image types

The \c mtv command handles all of the LSST %image types:
<DL>
<DT>Image
<DD> The pixels are displayed on your image display.  Image%s don't have a Wcs, so no
astronomical WCS information is available, but we do support \c WCSA and \c WCSB;
the former is 0-indexed %pixel coordinates allowing for the Image's \c XY0; the latter
is 0-indexed %pixel coordinates relative to the bottom left %pixel being \c (0, \c 0).

\c mtv accepts an optional \c wcs argument, which allows you to provide an astronomical Wcs (but
if you have an DecoratedImage or Exposure this is done for you)

<DT> DecoratedImage
<DD> Displayed like Image, but with the default WCS set from the DecoratedImage's \c Wcs

<DT> Mask
<DD> Overlay the current %display with the Mask.

If you're using the ds9 backend there's a bug that
prevents you from displaying a pure Mask,
but you can use the \c isMask argument to force the Mask to be treated as a 16-bit %image.
Also, the Mask %display isn't as fast as you might like,
as ds9's current API requires us to send each mask plane as a separate 16-bit %image (I
have asked Bill Joy at CfA to change this).  Each bitplane may be given a separate
colour;  you can inspect the current mapping with \c getMaskPlaneColor or set it with
\c setMaskPlaneColor.  If a mask plane has no defined colour, one will be chosen for
you.

You may vary the mask's transparency, either via the GUI or
with e.g. \c setMaskTransparency(50).

<DT> MaskedImage
<DD> The image-plane pixels are displayed, overlaid with the mask.  If you want to look
at the variance too, you'll need to say something like:
\code
mi = afwImage.MaskedImageF("mi.fits")
disp.mtv(mi)

afwDisplay.getDisplay(1).mtv(mi.getVariance())
afwDisplay.getDisplay(1).mtv(mi.getMask())
\endcode

<DT> Exposure
<DD> Displayed like MaskedImage, but with the default WCS set from the MaskedImage's \c Wcs
</DL>

\subsubsection afwSecImageDisplayConfiguration How to Configure the Display Device

You won't need to configure the display code at all if you're happy with ds9, as it is 
the default-default backend when available (\em i.e. if you have display_ds9 setup).

At some point we may add a configuration mechanism using environment variables and/or dot files,
but for the present the recommended way to set your preferred display environment is by using
python's startup file.  \em E.g. if you have the environment variable $PYTHONSTARTUP set to \c ~/.pythonrc,
you'd edit \c ~.pythonrc to say something like:
\code
try:
    import lsst.afw.display as afwDisplay
except ImportError:
    afwDisplay = None

if afwDisplay:
    try:
        afwDisplay.setDefaultBackend("myDevice")  # or "ds9"
    except RuntimeError as e:
        print e

    afwDisplay.setDefaultMaskTransparency(75)
\endcode

\subsection afwSecImageDisplayMosaics   How to build a mosaic image

There are facilities to build mosaics of %images in \c lsst.afw.display.utils (n.b. these
are mosaics in the sense of a tiled floor;  we're not building astrophysical mosaics
projected on the sky.)

The basic class is \c Mosaic:
\code
m = Mosaic()
m.setGutter(5)
m.setBackground(10)
m.setMode("square")                   # the default

mosaic = m.makeMosaic(im1, im2, im3)   # build the mosaic
display = afwDisplay.getDisplay()
display.mtv(mosaic)                        # display it
m.drawLabels(["Label 1", "Label 2", "Label 3"], display) # label the panels

# alternative way to build a mosaic
images = [im1, im2, im3]               
labels = ["Label 1", "Label 2", "Label 3"]

mosaic = m.makeMosaic(images)
display.mtv(mosaic)
m.drawLabels(labels, display)

# Yet another way to build a mosaic (no need to build the images/labels lists)
for i in range(len(images)):
    m.append(images[i], labels[i])

mosaic = m.makeMosaic()
display.mtv(mosaic)
m.drawLabels(display=display)
\endcode
You can return the (ix, iy)th (or nth) bounding box with getBBox()

See \ref lsst.afw.display.utils.Mosaic for more details; there are examples near the end of the iPython
notebook at \ref examples/imageDisplay.ipynb (we'll provide an nbviewer link once this is pushed to github).

\subsection afwSecDs9Firewall  How to use ds9 through a firewall

If you're using ds9 you may want to use it through a firewall;  here's how.

On your home machine, type
\code
export XPA_PORT="DS9:ds9 22345 22346"
#                        ^^^^^ ^^^^^
#                        Choose any 2 consecutive numbers over 4095
ssh -N -f lsstXXX.ncsa.uiuc.edu -R 22345:localhost:22345 -R 22346:localhost:22346 > /dev/null 2>&1
ds9 &
\endcode
(<tt>setenv XPA_PORT "DS9:ds9 22345 22346"</tt> for csh users, of course)

On \c lsstXXX.ncsa.uiuc.edu, set \c XPA_PORT to the same value, setup \c display_ds9 and \c afw,
start \c python, <tt>import lsst.afw.display as afwDisplay</tt> and proceed:
\code
export XPA_PORT="DS9:ds9 22345 22346"
python
>>> import lsst.afw.display as afwDisplay
>>> afwDisplay.setBackend("ds9")          # the default, so probably not needed
>>> afwDisplay.getDisplay().erase()
\endcode

xpa afficianados will note that I'm bypassing the xpa name server; it needs
another set of 2 or 3 ports tunnelled, and setting up ACLs.

Here's \link tunnelDs9 a script\endlink (in \c afw/examples) to run on your home machine that should
simplify setting up/tearing down the ssh tunnels.  It's not great, so improvements would/will be welcomed.

\example tunnelDs9

*/
}}}
