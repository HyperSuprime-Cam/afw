// -*- lsst-c++ -*-

namespace lsst { namespace afw { namespace table {

/**
 *  @page afwTable Tables
 *
 *  @section afwTableBasicUsage Basic Usage
 *
 *  In C++:
 *  @code
 *  #include "lsst/afw/table.h"
 *  using namespace lsst::afw::table;
 *  Schema schema;
 *  Key<int> k1 = schema.addField<int>("f1", "doc for f1");
 *  Key<float> k2 = schema.addField<float>("f2", "doc for f2", "units for f2");
 *  Key< Array<double> > k3 = schema.addField< Array<double> >("f3", "doc for f3", "units for f2", 5);
 *  PTR(BaseTable) table(schema);
 *  PTR(BaseRecord) record = table->makeRecord();
 *  record->set(k1, 2);
 *  record->set(k2, 3.14);
 *  ndarray::Array<double,1> a3 = (*record)[k3]; // operator[] allows in-place edits for some fields
 *  a3[2] = 5.2;
 *  std::cout << record->get(k1) << ", " << record->get(k2) << ", " << record->get(k3);
 *  @endcode
 *
 *  In Python:
 *  @code
 *  from lsst.afw.table import *
 *  schema = Schema()
 *  k1 = schema.addField("f1", type=int, doc="doc for f1")
 *  k2 = schema.addField("f2", type=numpy.float32, "doc for f2", units="units for f2")
 *  k3 = schema.addField("f3", type="Array<F8>", doc="doc for f3", units="units for f2", size=5)
 *  table = BaseTable.make(schema)
 *  record = table.makeRecord()
 *  record.set(k1, 2)
 *  record.set(k2, 3.14)
 *  record[k3] = numpy.random.randn(5) # ndarray::Array == numpy.ndarray in Python
 *  print "%d, %f, %s" % (record.get(k1), record.get(k2), record.get(k3))
 *  @endcode
 *
 *  @section afwTableOverview Overview
 *  The primary objects users will interact with in the table library are Schemas, Keys, Tables,
 *  Records, and Catalogs.  Schema is a concrete class that defines the columns of a table; it behaves
 *  like a heterogeneous container of SchemaItem<T> objects, which are in turn composed of Field
 *  and Key objects.  A Field contains name, documentation, and units, while the Key object is
 *  a lightweight opaque object used to actually access elements of the table.  Using keys for
 *  access allows reads and writes to compile down to little (if any) more than a pointer
 *  offset and dereference.  String field names can be used instead of keys in Python (though 
 *  this is less efficient), but this is not possible in C++.
 *  
 *  Record and table classes are defined in pairs; each record class has a 1-to-1
 *  correspondence with a table class.  A record at its simplest is just a row in a table,
 *  though both classes are polymorphic and derived classes can add additional functionality
 *  (such as the SourceRecord and SourceTable classes, for instance).  A table acts as a factory
 *  for records; all record creating (even cloning) goes through a table member function.  This
 *  is because the underlying data for records is allocated in multi-record blocks by the table.
 *  Records thus hold a shared_ptr back to their table, as well as a pointer to their memory block,
 *  and data members that are shared by multiple records (such as the Schema) are accessed through
 *  the table rather than held separately in each record.  A table does not hold pointers to
 *  the records it is associated with, however, or provide ways to iterate over records.
 *
 *  Instead, we have a separate concept of a container class, which holds a single table pointer
 *  and multiple records, and is usually just a wrapper around an STL container of record shared_ptrs.
 *  While we've left open the possibility of additional containers in the future, the CatalogT and
 *  SimpleCatalogT implementations (better known by the BaseCatalog, SimpleCatalog, and SourceCatalog
 *  typedefs) will be the most commonly used.  Catalogs are based on a std::vector of record shared_ptrs,
 *  but provided accessors and iterators that yield record references, so you don't can use iter->method
 *  instead of (**iter).method.  Most Catalog operations are analogous to std::vector operations, though
 *  they often provide support for both deep and shallow copies, and the SimpleCatalogT class adds
 *  sorting and lookups based on unique IDs.  Future derived classes of BaseRecord and BaseTable
 *  will hopefully be able to just use one of the existing catalog templates and provide a new typedef
 *  rather than require a new catalog class.  Catalogs have a significantly different interface in
 *  Python, where they mimic a (limited) Python list instead of a C++ vector (see the Python in-line help).
 *
 *  @section afwTableMemory Memory and Copy Semantics
 *  Tables and records are noncopyable, and are always allocated in shared_ptrs.  Both can be
 *  deep copied, however - tables have a clone() member function, and records can be copied
 *  by calling copyRecord() on the table.  Records are also default constructable, in the sense
 *  that a table must always be able to create a record with no additional arguments besides
 *  what the table itself can provide (SourceTable, for instance, sets the ID of default-constructed
 *  records using an internal IdFactory object).
 *
 *  The memory in a table is allocated in blocks, as in most implementations of the C++ STL's deque.
 *  When the capacity of the most recent block is exhausted, a new block will be allocated for future
 *  records.  The pointers to records themselves are not pointers into these blocks (record instances
 *  are allocated as usual with new or make_shared) - the block memory is accessed via a void pointer
 *  in the BaseRecord class, and derived record classes shouldn't have to deal with it at all.
 *
 *  One of the advantages of this approach is that most - but not all - records will be close to
 *  their neighbors in memory.  More importantly, unlike std::vector, the whole table is never
 *  silently reallocated.  Finally, if a sequence of records have been allocated from the same block,
 *  their columns may be accessed as strided ndarray objects (and hency NumPy arrays in Python) using
 *  ColumnView.
 *
 *  @section afwTableFits FITS I/O
 *  Records can be saved/loaded to/from FITS binary tables using the writeFits and readFits member
 *  functions on the library's container classes.  Not all FITS binary table column types are supported,
 *  but the most common ones are (notable exceptions are strings, complex numbers, and variable-length
 *  arrays).  As long as a FIT binary table contains only allowed column types, it should be possible
 *  to read it into an afw/table container, though FITS tables from external sources will not be able
 *  to tell our FITS reader to use specialized field types like Point or Covariance - any multi-element
 *  column will be read in as an array unless special keys are present in the FITS header.
 *
 *  The FITS I/O functionally is implemented in the io::FitsReader and io::FitsWriter classes, which inherit
 *  from the more general io::Reader and io::Writer classes.  New types of serialization for tables
 *  should follow the same pattern and create new subclasses of io::Reader and io::Writer.  In addition,
 *  new table/record types will usually want to implement a new FitsWriter and FitsReader subclass
 *  (which can delegate most of the work to the base classes) to save derived-class data members and
 *  ensure loaded objects have the correct type.
 *
 *  @section afwTableSchema Schemas
 *  Schema objects are append-only objects - you can add new fields, but you can never remove them.
 *  This is because the schema creates and returns keys to fields as they are added, and removing
 *  a field from the schema would invalidate not only the key for that field, but also keys for any
 *  fields that were added after it.  Copying a schema and adding new records to the copy will
 *  allow keys created from the original to work with tables and records that use the copy; we can
 *  consider the original in this case to be a subset of the original schema, and we can test for this
 *  using Schema::contains.  Containment tests and the Schema equality comparison operators only
 *  consider the position, type and length of fields (in other words, in the information contained
 *  in a Key) - you can renam a field in a schema without invalidating keys or changing how it is
 *  compared to other schemas.  (Note that one schema being a subset or superset of another is
 *  completely unrelated to the SubSchema class, which is used to implement the dotted namespaces
 *  discussed below).
 *
 *  @section afwTableFieldNames Field Names
 *  By convention, field names are all lowercase and have '.'-separated elements.  Only letters, numbers
 *  and periods should be used.  These rules are not enforced, but names that do not meet these requirements
 *  may not round-trip correctly in FITS (periods are converted to underscores in the FITS persistence
 *  layer, so we cannot distinguish between the two when we read tables from FITS).
 *  Schema provides extra functionality for names with period-separated elements; these elements can
 *  be accessed separately individually with the bracket operators.  More information on schema namespaces
 *  can be found in the Schema and SubSchema class documentation, and the testSchema.py unit test may
 *  also be a useful example.
 *
 *  Other field strings (documentation and units) are essentially arbitrary, but should not contain
 *  single quotes, as these may also confuse FITS parsers (even when escaped).
 *
 *  @section afwTableFieldTypes Field Types
 *  In C++, field types are defined by the template arguments to Key and Field (among others).  Empty
 *  tag templates (Array, Point, Moments, Covariance) are used for compound fields.  In Python, strings
 *  are used to set field types.  The Key and Field classes for each type can be accessed through
 *  dictionaries (e.g. Key["F4"]), but usually these type strings are only explicitly written
 *  when passed as the 'type' argument of Schema.addField.  Some Python types can also be used
 *  in place of type strings for fields (e.g. int, afw.coord.Coord).  Note that Python type strings
 *  with angle brackets do not have the extra spaces that are necessary when writing templates in C++98.
 *
 *  Some field types require a size argument to be passed to the Field constructor or Schema::addField;
 *  while this size can be set at compile time, all records must have the same size.
 *
 *  Not all field types support all types of data access.  All field types support atomic access to
 *  the entire field at once through BaseRecord::get and BaseRecord::set.  Some field types support
 *  square bracket access to references or reference-like objects (i.e. ndarray::ArrayRef) as well.
 *  Only scalar and array fields support column access through ColumnView.
 *
 *  A Key for an individual element of a compound field can also be obtained from the compound Key
 *  object or (for 'named subfields') from the Schema directly (see Schema and the KeyBase specializations).
 *  Element keys can be used just like any other scalar Key, and hence provide access to column views.
 *
 *  <table border="1">
 *  <tr>
 *  <th>C++ Type</th>
 *  <th>Python Type String</th>
 *  <th>Python Aliases Types</th>
 *  <th>C++ Value (get/set) Type</th>
 *  <th>Reference Access</th>
 *  <th>ColumnView Support</th>
 *  <th>Dynamic Size</th>
 *  <th>Named Subfields</th>
 *  <th>Notes</th>
 *  </tr>
 *  <tr>
 *  <td>Flag</td> <td>"Flag"</td> <td></td> <td>bool</td>
 *  <td>No</td> <td>Yes</td> <td>No</td> <td></td> <td>Stored internally as a single bit</td>
 *  </tr>
 *  <tr>
 *  <td>boost::int32_t</td> <td>"I4"</td> <td>int, numpy.int32</td> <td>boost::int32_t</td>
 *  <td>Yes</td> <td>Yes</td> <td>No</td> <td></td> <td></td>
 *  </tr>
 *  <tr>
 *  <td>boost::int64_t</td> <td>"I8"</td> <td>long, numpy.int64</td> <td>boost::int64_t</td>
 *  <td>Yes</td> <td>Yes</td> <td>No</td> <td></td> <td></td>
 *  </tr>
 *  <tr>
 *  <td>float</td> <td>"F4"</td> <td>numpy.float32</td> <td>float</td>
 *  <td>Yes</td> <td>Yes</td> <td>No</td> <td></td> <td></td>
 *  </tr>
 *  <tr>
 *  <td>double</td> <td>"F8"</td> <td>float, numpy.float64</td> <td>double</td>
 *  <td>Yes</td> <td>Yes</td> <td>No</td> <td></td> <td></td>
 *  </tr>
 *  <tr>
 *  <td>Angle</td> <td>"Angle"</td> <td>afw.geom.Angle</td> <td>afw::geom::Angle</td>
 *  <td>Yes</td> <td>Yes</td> <td>No</td> <td></td>
 *  <td>ColumnView access in Python returns an array of numpy.float64 (in radians).</td>
 *  </tr>
 *  <tr>
 *  <td>Coord</td> <td>"Coord"</td> <td>afw.coord.Coord, afw.coord.IcrsCoord</td> 
 *  <td>afw::coord::IcrsCoord</td>
 *  <td>No</td> <td>No</td> <td>No</td> <td>ra, dec</td>
 *  <td> Can assign any Coord, but always stored as ICRS </td>
 *  </tr>
 *  <tr>
 *  <td>Point<int></td> <td>"Point<I4>"</td> <td>afw.geom.Point2I</td> <td>afw::geom::Point2I</td>
 *  <td>No</td> <td>No</td> <td>No</td> <td>x, y</td> <td></td>
 *  </tr>
 *  <tr>
 *  <td>Point<float></td> <td>"Point<F4>"</td> <td></td> <td>afw::geom::Point2D</td>
 *  <td>No</td> <td>No</td> <td>No</td> <td>x, y</td> <td></td>
 *  </tr>
 *  <tr>
 *  <td>Point<double></td> <td>"Point<F8>"</td> <td>afw.geom.Point2D</td> <td>afw::geom::Point2D</td>
 *  <td>No</td> <td>No</td> <td>No</td> <td>x, y</td> <td></td>
 *  </tr>
 *  <tr>
 *  <td>Moments<float></td> <td>"Moments<F4>"</td> <td></td> <td>afw::geom::ellipses::Quadrupole</td>
 *  <td>No</td> <td>No</td> <td>No</td> <td>xx, yy, xy</td> <td></td>
 *  </tr>
 *  <tr>
 *  <td>Moments<double></td> <td>"Moments<F8>"</td> <td>afw.geom.ellipses.Quadrupole</td>
 *  <td>afw::geom::ellipses::Quadrupole</td>
 *  <td>No</td> <td>No</td> <td>No</td> <td>xx, yy, xy</td> <td></td>
 *  </tr>
 *  <tr>
 *  <td>Array<float></td> <td>"Array<F4>"</td> <td></td> <td>ndarray::Array<float,1></td>
 *  <td>Yes</td> <td>Yes</td> <td>Yes</td> <td></td> <td>operator[] returns an ndarray::ArrayRef</td>
 *  </tr>
 *  <tr>
 *  <td>Array<double></td> <td>"Array<F8>"</td> <td></td> <td>ndarray::Array<double,1></td>
 *  <td>Yes</td> <td>Yes</td> <td>Yes</td> <td></td> <td>operator[] returns an ndarray::ArrayRef</td>
 *  </tr>
 *  <tr>
 *  <td>Covariance<float></td> <td>"Cov<F4>"</td> <td></td> <td>Eigen::MatrixXf</td>
 *  <td>No</td> <td>No</td> <td>Yes</td> <td></td>
 *  <td>symmetric matrix is stored packed (size*(size+1)/2 elements)</td>
 *  </tr>
 *  <tr>
 *  <td>Covariance<double></td> <td>"Cov<F8>"</td> <td></td> <td>Eigen::MatrixXd</td>
 *  <td>No</td> <td>No</td> <td>Yes</td> <td></td>
 *  <td>symmetric matrix is stored packed (size*(size+1)/2 elements)</td>
 *  </tr>
 *  <tr>
 *   <td>Covariance<&nbsp;Point<float>&nbsp;></td> <td>"Cov<Point<F4>>"</td> <td></td>
 *   <td>Eigen::Matrix2f</td>
 *   <td>No</td> <td>No</td> <td>No</td> <td></td> <td>symmetric matrix is stored packed (3 elements)</td>
 *  </tr>
 *  <tr>
 *   <td>Covariance<&nbsp;Point<double>&nbsp;></td> <td>"Cov<Point<F8>>"</td> <td></td>
 *   <td>Eigen::Matrix2d</td>
 *   <td>No</td> <td>No</td> <td>No</td> <td></td> <td>symmetric matrix is stored packed (3 elements)</td>
 *  </tr>
 *  <tr>
 *   <td>Covariance<&nbsp;Moments<float>&nbsp;></td> <td>"Cov<Moments<F4>>"</td> <td></td>
 *   <td>Eigen::Matrix3f</td>
 *   <td>No</td> <td>No</td> <td>No</td> <td></td> <td>symmetric matrix is stored packed (6 elements)</td>
 *  </tr>
 *  <tr>
 *   <td>Covariance<&nbsp;Moments<double>&nbsp;></td> <td>"Cov<Moments<F8>>"</td> <td></td>
 *   <td>Eigen::Matrix3d</td>
 *   <td>No</td> <td>No</td> <td>No</td> <td></td> <td>symmetric matrix is stored packed (6 elements)</td>
 *  </tr>
 *  </table>
 */

/**
 *  @page Winter2012dFaq Winter2012d FAQ
 *
 *  This page documents the major changes introduced along with the afw/table
 *  package in Winter2012d.  Most - but not all - of it relates to the change
 *  from afw::detection::Source to SourceRecord and SourceTable, and the
 *  associated overhaul of the source measurement framework in meas/algorithms.
 *  As a result, many of the questions here involve changes outside AFW.  It is
 *  mostly complementary to the @ref afwTable
 *
 *  @section Winter2012dFaqNewSources What is the replacement for afw::detection::Source?  How do I make one?
 *
 *  The new Source class is afw::table::SourceRecord, which is now just one of
 *  several different kinds of records (it inherits from SimpleRecord, which
 *  inherits from BaseRecord).  You can't just create a SourceRecord on its own,
 *  however, as all records are now exclusively constructed by a table object.
 *  Each record class is associated with exactly one table class, so you'd use a
 *  SourceTable to create a SourceRecord.  And to create a table, first you need
 *  to define the schema.  SourceRecord and SourceTable have accessors that
 *  require some fields to always exist, so you need to start with this
 *  "minimal" source schema and add custom fields on top of it.  SimpleRecord /
 *  SimpleTable have a different minimal schema (a subset of the minimal source
 *  schema), and BaseRecord / BaseTable can work with any schema.  The vast
 *  majority of fields are not part of the minimal schema, however, and instead
 *  are added to the schema by the algorithms that measure them.
 *
 *  Here's how it all looks in in C++:
 *  @code
 *  Schema schema = SourceTable::makeMinimalSchema();
 *  // ... add additional fields to the schema.
 *  PTR(SourceTable) table = SourceTable::make(schema);
 *  PTR(SourceRecord) record = table->makeRecord();
 *  @endcode
 *  ...and in Python:
 *  @code
 *  schema = SourceTable.makeMinimalSchema()
 *  # ... add additional fields ot the schema.
 *  table = SourceTable.make(schema)
 *  record = table.makeRecord()
 *  @endcode
 *
 *  Note that tables are responsible for ALL creation of records, including
 *  copying:
 *  @code
 *  PTR(SourceRecord) record2 = table->copyRecord(record);
 *  @endcode
 *  It isn't necessary to use the same table to create the original record and
 *  its copy, but the two tables do have to have the same schema (though you can
 *  also pass a SchemaMapper object to copyRecord to copy values from one schema
 *  to another).  In fact, the two tables don't even have to have the same type
 *  - data from any kind of record can be copied to any other, and the type of
 *  the new record is determined by the type of the table used to make the copy.
 *  
 *  @section Winter2012dFaqSourceCatalog What is the replacement for afw::detection::SourceSet?
 *
 *  Records are formally noncopyable (i.e. you can copy them, but only with a
 *  table), so you can't make an STL container of records.  But there's nothing
 *  wrong with an STL container of record shared_ptrs.
 *
 *  The afw::table library provides a couple of container template classes,
 *  CatalogT and SimpleCatalogT (with BaseCatalog, SimpleCatalog, and
 *  SourceCatalog typedefs), that provide some advantages over standard STL
 *  containers of shared_ptrs:
 *   - Dereferenced iterators and accessors (even though catalogs are based on a
 *     std::vector of shared_ptr, iterators and accessors yield references);
 *   - FITS binary table I/O;
 *   - both deep and shallow copy and assignment;
 *   - access to the table and schema shared by all records in the catalog.
 *
 *  SimpleCatalog and SourceCatalog also provide find methods to retrieve
 *  sources by ID (but these require the catalog to be sorted in advance).
 *
 *  Catalogs must be constructed with a table object, and all records in the
 *  catalog must belong to that table.  You can default-construct a catalog with
 *  a null table pointer, but such a catalog should be considered unusable until
 *  a fully-constructed catalog is assigned to it, providing it with a valid
 *  table.  A base-class catalog class can contain records and tables of a
 *  derived class (e.g. a BaseCatalog can hold a SourceTable and SourceRecords),
 *  but of course its accessors will return BaseRecord and BaseTable pointers,
 *  which would have to be casted to the derived type.
 *
 *  @section Winter2012dFaqFieldMapping How do I access fields in a source?
 *
 *  Most fields in a SourceRecord do not have direct accessors.  Instead, you
 *  need to access them through a Key object.  You can get a Key in three ways:
 *   - When you add a field to a schema, a key to that field is returned.
 *   - You can use Schema::find (or equivalently Schema::operator[]) to lookup a
 *     field by name in a schema.
 *   - If you already have a compound or array key, you can obtain a key to an
 *     element of it using member * functions on the key itself.
 *
 *  All types of fields can be accessed with BaseRecord::get and set with
 *  BaseRecord::set.  Some field types also support access through operator[],
 *  which returns references and allow values to be set in-place.  For more
 *  information on what you can do with different field types, see
 *  @ref afwTableFieldTypes.
 *
 *  In Python (but not C++), you can also access fields using the string field
 *  name instead of a key (this does a key lookup in the schema under the hood).
 *  This should be avoided in performance-critical areas, but it's very
 *  convenient in unit tests and interactive sessions.
 *  
 *  SourceTable and SourceRecord also provide aliases to fields that correspond
 *  to common measurement "slots" (centroid, shape, psf flux, model flux, etc.).
 *  You can set what fields are aliased by using the define* member functions on
 *  SourceTable.  Once they're defined, you can use accessors on SourceRecord
 *  (getCentroid, getPsfFlux, etc.) to retrieve them.  Note that they aren't
 *  defined by default, however, and trying to access them when they aren't
 *  defined will produce assertion failures.  In Python, you can use
 *  SourceSlotConfig (in meas/algorithms) to setup all the slots on a table.
 *  Also note that there are intentionally no setters for the aliases; the
 *  intent is that measurement algorithms will set the original fields using
 *  keys, and these values should not be overwritten later.  If it is necessary
 *  to set an alias field (which should mostly just be in test code), you can
 *  get the key corresponding to a slot alias from the table (getCentroidKey,
 *  getPsfFluxKey, etc.).
 *
 *  @section Winter2012dFaqFlags What happened to source's detection flags?
 *
 *  Flags are handled individually in afw::table, and operate essentially like
 *  boolean fields.  They are internally stored as a single bit, but the details
 *  of how they are stored is considered an implementation detail.  Algorithms
 *  that set flags can now reserve space for as many bits as they like.
 *
 *  Accordingly, all of the bits that used to be in the "detection flags" on source
 *  are now "owned" by various algorithms, and have new names to reflect this status.
 *  The flags that correspond to bits set in the image mask are now owned by the
 *  PixelFlags algorithm in meas/algorithms, and have names like "flags.pixel.edge".
 *
 *  @section Winter2012dFaqNumPy How do I get a NumPy array from a table?
 *
 *  If you have a SourceCatalog (or any other catalog), you can use
 *  CatalogT::getColumnView to obtain a ColumnView object that provides
 *  key-based access to the columns of the catalog.  However, for this to work,
 *  all the records in the catalog must be contiguous in memory.  This can be
 *  guaranteed by calling BaseTable::preallocate before creating any records,
 *  and it should be true of any catalogs read from FITS.  If you have a catalog
 *  that isn't contiguous, using CatalogT::copy will make a contiguous
 *  deep copy.
 *
 *  @section Winter2012dFaqFootprintSet What happened to makeFootprintSet?
 *
 *  FootprintSet is no longer a template (instead it has a template constructor and a few template
 *  member functions), so there was no longer any need for the makeFootprintSet function.  You
 *  can just call the FootprintSet constructor directly (no explicit template paramters needed).
 *
 *  Note that there's now just a "FootprintSet" class in Python (not "FootprintSet[UIFD]") for
 *  the same reason.
 *
 *  @section Winter2012dFaqMeasUtils What happened to the measurement and detection drivers in meas/utils?
 *
 *  These have been moved to meas/algorithms (SourceDetectionTask and SourceMeasurementTask in 
 *  measurement.py and detection.py, respectively).  They've also been substantially changed - especially
 *  source measurement.  Moving them into meas/algorithms allowed us to remove some almost-duplicate driver
 *  code that was necessary to run some meas/algorithms unit tests, and make measurement and applying
 *  aperture corrections part of the same Task.
 *
 *  @section Winter2012dFaqMeasurement What happened to MeasureQuantity and the Measurement (Photometry/Astrometry/Shape) classes?
 *
 *  Because sources can now have arbitrary run-time configurable fields, there was no longer any
 *  need to template the algorithm classes on their measurement types: algorithms now add the
 *  fields they will fill to the schema upon construction, and save keys to access those fields
 *  later.  There are intermediate base classes of algorithm for these three measurement types,
 *  which make it slightly easier to implement new algorithms, but there is no requirement that
 *  all algorithms fit into these categories.
 *
 *  @section Winter2012dFaqSimpleMeasurement How do I run a measurement algorithm without creating a whole lot of source-related throwaways?
 *
 *  Unfortunately, you can't right now.  The right solution long-term is to give the measurement
 *  algorithm classes a better interface and move them out of source files, and have their "apply"
 *  members functions delegate to other member functions that don't require a source.  Until that's
 *  implemented across the board, if you need to access a particular algorithm, please consider
 *  refactoring that algorithm in this direction; we can worry about a consistent public interface for
 *  algorithms in the future.
 *
 *  @section Winter2012dFaqPhotometryTask What happened to the Photometry task in pipe_tasks?
 *  
 *  After turning detection and measurement into full-fledged classes in meas/algorithms (see above),
 *  Photometry just seemed like an unnecessary extra layer.  Now, ProcessCcdTask and CalibrateTask just
 *  use SourceDetectionTask and SourceMeasurementTask directly.
 */
 
}}} // namespace lsst::afw::table
